# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert the Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#First I determined the avg popularity, danceability, and energy by artist and track. 
SELECT artist_name, track_name, avg(popularity), avg(danceability), avg(energy)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name

#Then I determined who the Top 10 artists are by popularity
SELECT artist_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity desc LIMIT 10;

#Then I compared the duration and energy of the top 5 most danceable songs for exercise purposes.
SELECT track_name, duration_ms, danceability, energy
FROM BIT_DB.Spotifydata
ORDER BY danceability desc LIMIT 5;

#Who wrote the longest song?
SELECT artist_name, MAX(duration_ms)
FROM BIT_DB.Spotifydata;

#Which of the 10 quietest songs has the highest tempo?
SELECT track_name, loudness, tempo
FROM BIT_DB.Spotifydata
ORDER BY loudness desc LIMIT 10;

#Which of Olivia Rodrigo's songs are the most danceable?
SELECT track_name, danceability
FROM BIT_DB.Spotifydata
WHERE artist_name = "Olivia Rodrigo"
ORDER BY danceability desc LIMIT 2;

#Finally, I sorted the songs based on valence or "cheeriness level"
SELECT track_name, artist_name,
CASE
    WHEN valence BETWEEN 0.0 AND 0.3 THEN "gloomy"
    WHEN valence BETWEEN 0.3 AND 0.6 THEN "moderate"
    WHEN valence BETWEEN 0.6 AND 1 THEN "cheery"
    ELSE "NULL"
END AS "cheeriness_level"
FROM BIT_DB.Spotifydata
ORDER BY cheeriness_level;
